name: Deploy CDK Stack

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Set commit SHA
        id: vars
        run: echo "COMMIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
        
      - name: Install dependencies
        run: |
          cd cdk
          pip install poetry
          poetry config virtualenvs.create false
          poetry install
          
      - name: Run CDK tests
        run: |
          cd cdk
          poetry run pytest
          
      - name: CDK Bootstrap (if needed)
        run: |
          cd cdk
          poetry run cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.AWS_REGION }}
        
      - name: Deploy CDK Stack
        run: |
          cd cdk
          poetry run cdk deploy SurveyStack \
            --require-approval never \
            --context awsAccountId=${{ secrets.AWS_ACCOUNT_ID }} \
            --context awsRegion=${{ secrets.AWS_REGION }} \
            --context commitSha=${{ env.COMMIT_SHA }} \
            --context backendEcrRepoUri=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/survey_backend \
            --context frontendEcrRepoUri=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/survey_frontend \
            --context certificateArn=${{ secrets.CERTIFICATE_ARN }} \
            --context hostedZoneId=${{ secrets.HOSTED_ZONE_ID }}
            
      - name: Run deployment diagnostics
        if: success() || failure()
        run: |
          cd cdk
          poetry run python diagnosedeploy.py
          
      - name: Notify on success
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "✅ CDK Deployment Successful! Environment: ${{ github.event.inputs.environment || 'production' }}\nCommit: ${{ github.event.head_commit.message || 'Manual deployment' }}\nDeployed by: ${{ github.actor }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          
      - name: Notify on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "❌ CDK Deployment Failed! Environment: ${{ github.event.inputs.environment || 'production' }}\nCommit: ${{ github.event.head_commit.message || 'Manual deployment' }}\nTriggered by: ${{ github.actor }}\nCheck the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK