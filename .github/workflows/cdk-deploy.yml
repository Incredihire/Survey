name: Deploy CDK Stack

on:
  workflow_run:
    workflows: ["Build and Deploy Docker Images to AWS ECR"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - production
          - staging
      image_tag:
        description: 'Image tag to deploy (only needed for manual deployment)'
        required: false
        type: string

env:
  AWS_REGION: us-west-2
jobs:
  deploy:
    # Only run if the build workflow succeeded or this is a manual dispatch
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get image tag
        id: get-image-tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.image_tag }}" ]; then
            echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            # Download artifact from previous workflow to get the image tag
            gh api \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts > artifacts.json

            ARTIFACT_ID=$(jq -r '.artifacts[] | select(.name=="commit-sha") | .id' artifacts.json)
            if [ -n "$ARTIFACT_ID" ]; then
              mkdir -p /tmp/artifacts
              gh api \
                -H "Accept: application/vnd.github+json" \
                /repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip -o /tmp/artifacts/commit-sha.zip
              unzip -o /tmp/artifacts/commit-sha.zip -d /tmp/artifacts
              IMAGE_TAG=$(cat /tmp/artifacts/commit-sha.txt)
              echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
            else
              echo "IMAGE_TAG=latest" >> $GITHUB_ENV
              echo "Warning: Could not find commit-sha artifact, using 'latest' as fallback"
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install dependencies
        run: |
          cd cdk
          pip install poetry
          poetry config virtualenvs.create false
          poetry install

      - name: CDK Bootstrap (if needed)
        run: |
          cd cdk
          poetry run cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.AWS_REGION }}

      - name: Deploy CDK Stack
        run: |
          cd cdk
          echo "Deploying with image tag: ${{ env.IMAGE_TAG }}"
          poetry run cdk deploy SurveyStack \
            --require-approval never \
            --context awsAccountId=${{ secrets.AWS_ACCOUNT_ID }} \
            --context awsRegion=${{ env.AWS_REGION }} \
            --context commitSha=${{ env.IMAGE_TAG }} \
            --context backendEcrRepoUri=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/survey_backend \
            --context frontendEcrRepoUri=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/survey_frontend \
            --context certificateArn=${{ secrets.CERTIFICATE_ARN }}

      - name: Run deployment diagnostics
        if: success() || failure()
        run: |
          cd cdk
          python diagnosedeploy.py

      - name: Notify on success
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "✅ CDK Deployment Successful!\nEnvironment: ${{ github.event.inputs.environment || 'production' }}\nImage Tag: ${{ env.IMAGE_TAG }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "❌ CDK Deployment Failed!\nEnvironment: ${{ github.event.inputs.environment || 'production' }}\nImage Tag: ${{ env.IMAGE_TAG }}\nCheck the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK